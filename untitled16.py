# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-gWJSbCi9EWh8KOx4QqqAdQonZgqiKh_
"""

import os
import random
import nltk
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')


nltk.download('maxent_ne_chunker')
nltk.download('words')
random.seed(92)

corpus = str(["""In 2003, word n-gram model, at the time the best statistical algorithm, was overperformed by a multi-layer perceptron (with a single hidden layer and context length of several words trained on up to 14 million of words with a CPU cluster in language modelling) by Yoshua Bengio with co-authors.[8]
In 2010, Tomáš Mikolov (then a PhD student at Brno University of Technology) with co-authors applied a simple recurrent neural network with a single hidden layer to language modelling,[9] and in the following years he went on to develop Word2vec.
In the 2010s, representation learning and deep neural network-style (featuring many hidden layers) machine learning methods became widespread in natural language processing.
That popularity was due partly to a flurry of results showing that such techniques[10][11] can achieve state-of-the-art results in many natural language tasks, e.g., in language modeling[12] and parsing.[13][14]
This is increasingly important in medicine and healthcare, where NLP helps analyze notes and text in electronic health records that would otherwise be inaccessible for study when seeking to improve care[15] or protect patient privacy.[16]"""])

#NLTK recognises each word seperated by white-space, number, and punctuations as distinct tokens.
token_list = []
sentences = nltk.sent_tokenize(str(corpus))
for sentence in sentences:
  words = nltk.word_tokenize(sentence)
  token_list.extend(words) #list appending
  #tagged_words = nltk.pos_tag(words)
  #named_entities = nltk.ne_chunk(tagged_words)

# pos_tag() method and ne_chunk() methods perform Part-Of-Speech tagging and Named-Entity Recognition, respectively.
# The POS tagging is a task in which each word is tagged with a part-of-speech category. For example, the word 'horse' is tagged as a noun and 'walk' is tagged as a verb.
# A Named-Entity is a word (or a set of words) that represent name of a person, place, organisation, unit of measurement, etc.

print(token_list)
print ('\nLength of word_list:', len(token_list))

